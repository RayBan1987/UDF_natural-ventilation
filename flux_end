
DEFINE_INIT(head_end,d)
{
	Thread *tf = Lookup_Thread(d,surfNO);/*get the branched end surface*/
	face_t f;
	real xf[ND_ND];
	real A[ND_ND];  /*store face normal vector*/
	int n=-1;        /*loop variable*/
	real face_num=0;
	
	FILE *fp; /*pointer to a file */
	fp = fopen("flux_end.txt","w+");
	fprintf(fp,"/*this is recorded by FLUENT UDF*/\n");
	
	begin_f_loop(f,tf)
	{
		F_CENTROID(xf,f,tf); /*get the coordinate of a face*/
		F_AREA(A,f,tf);      /*get the face normal vector*/
	    face_num++;
	}end_f_loop(f,tf)
	
	fprintf(fp,"face normal area is %g, %g, %g\t",A[0]/NV_MAG(A),A[1]/NV_MAG(A),A[2]/NV_MAG(A));
	fprintf(fp,"face_num is %g\t",face_num);
	
	if (ND_DOT(A[0]/NV_MAG(A),A[1]/NV_MAG(A),A[2]/NV_MAG(A),1,0,0)>0)
	{
		fprintf(fp,"face area normal points to the branch\n");
	}
	else
	{
		fprintf(fp,"face area normal points to the main tunnel\n");
	}
	fprintf(fp,"vf_out mf_out vf_in mf_in mass_flow_in_rate neutral_height q_in q_out face_num\n");
	fclose(fp);
}

DEFINE_EXECUTE_AT_END(flux_end)
{
	Domain *d=Get_Domain(1);
    Thread *tf = Lookup_Thread(d,surfNO);/*get the branched end surface*/
    Thread *t0, *t1=NULL;
	cell_t c0,c1=-1; /* adjacent cell */
	face_t f;
	real xf[ND_ND],xc[ND_ND];
	real A[ND_ND];  /*store face normal vector*/

	real d_vf=0, d_mf=0;
	real vf_in=0, mf_in=0;
	real vf_out=0, mf_out=0;
	real q_in=0,q_out=0;
	
	int n=-1; /*loop variable*/
	real neutral_height=0,A_orintation=0,epsilon=100,face_num=0;
	
	FILE *fp; /*pointer to a file */
	fp = fopen("flux_end.txt","a+");
	
	begin_f_loop(f,tf)
	{
		F_CENTROID(xf,f,tf); /*get the coordinate of a face*/
		F_AREA(A,f,tf);      /*get the face normal vector*/
	   
	   c0=F_C0(f,tf);
	   t0=F_C0_THREAD(f,tf);   
	   c1=F_C1(f,tf);
	   t1=F_C1_THREAD(f,tf);
	   /*fprintf(fp,"zone id= %-5g\n",Thread_ID(tf));  /*write the coordinate*/
	   C_CENTROID(xc,c0,t0);
	   
	   d_vf=ND_DOT(A[0],A[1],A[2],C_U(c0,t0),C_V(c0,t0),C_W(c0,t0));/*dot product to calculate the volume flux*/
	   if (ND_DOT(C_U(c0,t0),C_V(c0,t0),C_W(c0,t0),1,0,0)<0)/*to main tunnel, inflow*/
		   {
		      vf_in=vf_in+fabs(d_vf);
			  mf_in=mf_in+fabs(d_vf)*C_R(c0,t0);
			  /* fprintf(fp,"in %-5g\n",C_W(c,t) );  write the coordinate*/
			  q_in=q_in+C_CP(c0,t0)*C_R(c0,t0)*(C_T(c0,t0)-300)*fabs(d_vf);/*sum the heat flux*/
		    if (epsilon <= fabs(C_P(c0,t0)))
		       {
		  		   epsilon = fabs(C_P(c0,t0));
		  		   neutral_height=xf[1];
			   }
		   }
		else
			{ /*outflow*/
		      vf_out=vf_out+fabs(d_vf);
			  mf_out=mf_out+fabs(d_vf)*C_R(c0,t0);
			  /*fprintf(fp,"out %-5g\n",C_W(c,t) );  write the coordinate*/
			 q_out=q_out+C_CP(c0,t0)*C_R(c0,t0)*(C_T(c0,t0)-300)*fabs(d_vf);/*sum the heat flux*/
			}
			/*fprintf(fp,"x=%g,y=%g,z=%g\n",xc[0],xc[1],xc[2]);*/
			face_num++;
	}end_f_loop(f,tf)
	/*fprintf(fp,"ID=%d\n",THREAD_ID(tf));*/
	fprintf(fp,"%-5g %-5g %-5g %-5g %-5g %-5g %-5g %-5g %-5g\n",vf_out,mf_out,vf_in,mf_in,mf_in-mf_out,neutral_height,q_in,q_out,face_num);  /*write the coordinate*/
	fclose(fp);
}
